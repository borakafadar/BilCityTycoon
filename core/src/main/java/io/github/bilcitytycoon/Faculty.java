package io.github.bilcitytycoon;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import com.badlogic.gdx.utils.Json;
import com.badlogic.gdx.utils.JsonValue;

/**
 * Represents a Faculty building in the game, extending the Building class.
 * Faculty buildings can be upgraded and generate income while affecting
 * student satisfaction and university reputation.
 */
public class Faculty extends Building implements Json.Serializable {

    /**
     * Upgrade type constants for readability.
     */
    private static final String UPGRADE_TYPE1 = "Ventilation";
    private static final String UPGRADE_TYPE2 = "Energy Efficiency";
    private static final String UPGRADE_TYPE3 = "Capacity";

    /**
     * Income generated by the faculty building.
     */
    public double income;

    /**
     * The image displayed for this faculty.
     */
    public transient Image image;

    /**
     * File path to the texture used to create the image.
     */
    public String imagePath;

    /**
     * Extra description or info about the building.
     */
    public String info;

    /**
     * Time required to build the faculty (in turns or units).
     */
    public int buildTime;

    /**
     * Array storing upgrade definitions for this faculty.
     */
    protected Upgrade[] upgrades;

    /**
     * Current level of upgrades applied (0-based index).
     */
    protected int currentUpgradeLevel;

    /**
     * Full constructor for a Faculty object.
     *
     * @param name Name of the building
     * @param cost Construction cost
     * @param bill Recurring cost
     * @param income Income generated
     * @param imagePath Path to image asset
     * @param buildTime Build duration
     * @param info Info text
     * @param studentSatisfactionPoint How many points it affects studentSatisfactionPoint
     * @param universityReputationPoint How many points it affects universityReputationPoint
     */
    public Faculty(String name, int cost, int bill, int income, String imagePath, int buildTime, String info,
                   int studentSatisfactionPoint, int universityReputationPoint) {
        super(name, cost, bill, studentSatisfactionPoint, universityReputationPoint);

        this.income = income;
        this.info = info;
        this.buildTime = buildTime;
        this.imagePath = imagePath;
        this.upgrades = new Upgrade[3];
        this.currentUpgradeLevel = 0;

        if (imagePath == null || imagePath.isEmpty()) {
            throw new IllegalArgumentException("Image path cannot be null or empty");
        }

        if (Gdx.files.internal(imagePath).exists()) {
            this.image = new Image(new Texture(Gdx.files.internal(imagePath)));
        } else {
            throw new IllegalArgumentException("Image file not found: " + imagePath);
        }
    }

    /**
     * Default constructor for Faculty, used during deserialization or testing.
     * libGDX JSON class requires a constructor without any parameters, so this is just a placeholder.
     */
    public Faculty() {
        super("Faculty", 100, 100, 0, 0);
    }

    public double getBuildCost() {
        return this.buildCost;
    }

    @Override
    public Image getImage() {
        if (image == null && imagePath != null && Gdx.files.internal(imagePath).exists()) {
            image = new Image(new Texture(Gdx.files.internal(imagePath)));
        }
        return image;
    }

    public String getImagePath() {
        return this.imagePath;
    }

    public int getBuildTime() {
        return this.buildTime;
    }

    @Override
    public String getInfo() {
        return this.info;
    }

    /**
     * Returns a readable string of the faculty's current properties.
     */
    @Override
    public String toString() {
        return "Faculty{name='" + name + "', cost=" + buildCost + ", bill=" + bill +
            ", income=" + income + ", buildTime=" + buildTime + "}";
    }

    /**
     * Adds an upgrade to a specific level in the upgrade list.
     * Not used for now.
     *
     * @param upgrade The upgrade object to add
     * @param level The level to assign (1â€“3)
     */
    public void addUpgrade(Upgrade upgrade, int level) {
        if (level < 1 || level > upgrades.length) {
            throw new IllegalArgumentException("Invalid upgrade level: " + level);
        }
        upgrades[level - 1] = upgrade;
    }

    public Upgrade[] getUpgrades() {
        return upgrades;
    }

    public int getCurrentUpgradeLevel() {
        return currentUpgradeLevel;
    }

    /**
     * Applies the upgrade at the current level and increments the level counter.
     *
     * @param info Text to append to the faculty info
     * @param game The game instance (for access to game-wide logic)
     * @param moneyHandler The player's MoneyHandler
     * @param player The Player object
     */
    public void applyNextUpgrade(String info, BilCityTycoonGame game, MoneyHandler moneyHandler, Player player) {
        if (currentUpgradeLevel < upgrades.length && upgrades[currentUpgradeLevel] != null) {
            Upgrade upgrade = upgrades[currentUpgradeLevel];
            upgrade.applyUpgrade(moneyHandler, player);
            applyUpgradeEffects(upgrade, info, game, moneyHandler, player);
            currentUpgradeLevel++;
        } else {
            System.out.println("No more upgrades available or upgrade not defined for this level.");
        }
    }

    /**
     * Applies the effect of the given upgrade and appends info to the faculty description.
     *
     * @param upgrade The upgrade to apply
     * @param info Additional info to append
     * @param game Game context
     * @param moneyHandler Player's money manager
     * @param player The player
     */
    private void applyUpgradeEffects(Upgrade upgrade, String info, BilCityTycoonGame game,
                                     MoneyHandler moneyHandler, Player player) {
        if (upgrade != null) {
            upgrade.applyUpgrade(moneyHandler, player);
        }
        this.info += "\n " + info + upgrade.getName();
    }

    /**
     * Serializes faculty data to JSON.
     * Used for saving games.
     *
     * @param json The Json object to write to.
     */
    @Override
    public void write(Json json) {
        json.writeValue("type", this.getClass().getName());
        json.writeValue("name", name);
        json.writeValue("buildCost", buildCost);
        json.writeValue("bill", bill);
        json.writeValue("studentSatisfactionPoint", studentSatisfactionPoint);
        json.writeValue("universityReputationPoint", universityReputationPoint);
        json.writeValue("income", income);
        json.writeValue("imagePath", imagePath);
        json.writeValue("info", info);
        json.writeValue("buildTime", buildTime);
        json.writeValue("currentUpgradeLevel", currentUpgradeLevel);
        // TODO: Upgrade array is not serialized here
    }

    /**
     * Deserializes faculty data from JSON and reloads the texture.
     * Used for loading games.
     *
     * @param json Json instance
     * @param jsonData Data to load
     */
    @Override
    public void read(Json json, JsonValue jsonData) {
        this.name = jsonData.getString("name");
        this.buildCost = jsonData.getInt("buildCost");
        this.bill = jsonData.getInt("bill");
        this.studentSatisfactionPoint = jsonData.getInt("studentSatisfactionPoint");
        this.universityReputationPoint = jsonData.getInt("universityReputationPoint");
        this.income = jsonData.getInt("income");
        this.imagePath = jsonData.getString("imagePath");
        this.info = jsonData.getString("info");
        this.buildTime = jsonData.getInt("buildTime");
        this.currentUpgradeLevel = jsonData.getInt("currentUpgradeLevel", 0);

        if (imagePath != null && Gdx.files.internal(imagePath).exists()) {
            this.image = new Image(new Texture(Gdx.files.internal(imagePath)));
        }
    }
}
