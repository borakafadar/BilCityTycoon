package io.github.bilcitytycoon;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.scenes.scene2d.ui.Image;

public class Faculty extends Building {

    private static final String UPGRADE_TYPE1 ="Ventilation";
    private static final String UPGRADE_TYPE2 ="Energy Efficiency";
    private static final String UPGRADE_TYPE3 ="Capacity";
    public double income; //Income generated by the faculty
    public transient Image image; //Visual representation of the faculty
    public String imagePath;
    public String info; //Additional information about the faculty
    public int buildTime; //Time required to build the faculty
    protected Upgrade[] upgrades; // Array to hold multiple upgrades
    protected int currentUpgradeLevel;//tracks the current upgrade

    public Faculty(String name, int cost, int bill, int income, String imagePath, int buildTime, String info) {
        super(name, cost, bill);
        this.income = income;
        this.info = info;
        this.buildTime = buildTime;
        this.imagePath = imagePath;
        this.upgrades = new Upgrade[3]; // Initialize the upgrades array with a size of 3
        this.currentUpgradeLevel = 0; // Tracks the current level of upgrade


        //Load the image for the faculty, with validation
        if (imagePath == null || imagePath.isEmpty()) {
            throw new IllegalArgumentException("Image path cannot be null or empty");
        }

        if (Gdx.files.internal(imagePath).exists()) {
            this.image = new Image(new Texture(Gdx.files.internal(imagePath)));
        } else {
            throw new IllegalArgumentException("Image file not found: " + imagePath);
        }
    }

    public Faculty(){
        super("Faculty", 100, 100);
    }

    //Getter methods for the faculty's properties
    public double getBuildCost() {
        return this.buildCost;
    }

    public double getIncome() {
        return this.income;
    }

    public Image getImage(){
        return this.image;
    }
    public String getImagePath(){
        return this.imagePath;
    }
    public int getBuildTime(){
        return this.buildTime;
    }

    @Override
    public String getInfo() {
        return this.info;
    }
     // Override toString for a detailed representation
     @Override
     public String toString() {
         return "Faculty{name='" + name + "', cost=" + buildCost + ", bill=" + bill +
                ", income=" + income + ", buildTime=" + buildTime + "}";
     }

    public void addUpgrade(Upgrade upgrade, int level){
        if (level < 1 || level > upgrades.length) {
            throw new IllegalArgumentException("Invalid upgrade level: " + level);
        }
        upgrades[level - 1] = upgrade;
    }

    public Upgrade[] getUpgrades() {
        return upgrades;
    }

    public int getCurrentUpgradeLevel() {
        return currentUpgradeLevel;
    }

    // Apply the next upgrade level
    public void applyNextUpgrade(String info,BilCityTycoonGame game) {
        if (currentUpgradeLevel < upgrades.length && upgrades[currentUpgradeLevel] != null) {
            Upgrade upgrade = upgrades[currentUpgradeLevel];
            upgrade.applyUpgrade(); // Mark the upgrade as applied
            applyUpgradeEffects(upgrade, info, game); // Apply the effects of the upgrade
            currentUpgradeLevel++; // Move to the next upgrade level
        } else {
            System.out.println("No more upgrades available or upgrade not defined for this level.");
        }
    }

    // Apply the effects of the upgrade to the building
    private void applyUpgradeEffects(Upgrade upgrade, String info,BilCityTycoonGame game) {
        Player pl = game.getPlayer();
        if (upgrade != null) {
            // Example: Reduce maintenance cost or increase capacity
            if(UPGRADE_TYPE1.equals(upgrade.getType())) {
                this.bill += 20;
                this.income += 30;
            } else if (UPGRADE_TYPE2.equals(upgrade.getType())) {
                this.bill += 30;
                this.income += 45;// Example: Reduce monthly bill by 30 BilCoins
            } else if (UPGRADE_TYPE3.equals(upgrade.getType())) {
                    pl.addStudenSatisfactionPoint(5); // Example: Increase student satisfaction by 5 points
                    Faculty faculty = (Faculty) upgrade.getBuilding();
                    faculty.setConstructionTime(faculty.getConstructionTime() + 5); // Example: Increase construction time by 5 days
                }
            }
            this.info += "\n " + info + upgrade.getName();

    }
}

